DOM Methods:
Events:
addEventListerner
append vs appendChild
Alter,Prompt and confirm
1.document.getElementById();
2.document.getElementsByclassname();
3.document.getElementsByTagname();
4.document.querySelector();
5.document.querySelectorAll();


document.getElementsByclassname():
if you wanted to select the elements based on the set of classes then,
we need to use this method..
Output:it will be an Array..

document.querySelector():
it will select based on the selectors ...
i.e classname,tagname,,id...
that too first occurence

Return Type: it will an HTML element


document.querySelectorAll():
it will select based on the selectors ...
i.e classname,tagname,,id...
it will select all the Occurenece

Return Type: Array


.addEventListerner:
it is used to add  the events in the DOM
it will take 2 parameters("eventname",functionname)
here we don't have a prefix called "on" like in html 

//Event???
var button = document.createElement("button");
button.setAttribute("type","button")
button.innerHTML = "Click me"
button.addEventListener("mouseover",foo)
document.body.append(button)


function foo(){
    console.log("hello world!!!");
}

append  vs append appendChild:

append is used to add the multiple elements
appendChild is used  to add the single elements
var div = document.createElement("div")
var  p = document.createElement("p")
var span = document.createElement("span")
div.appendChild(p,span);
document.body.append(div)


var div = document.createElement("div")
var  p = document.createElement("p")
var span = document.createElement("span")
div.appendChild(p,span);
document.body.append(div)


Based on the Previous code 
Print the firstname, Middlename, Lastname ,Email
in the HTML elements..

Output: First name : SSSSS
        Middle name : getElementsByclassname
        last name: sssdfasrfgfg

        function foo(){
  var res = prompt("Enter the age of the student")
  var span = document.createElement("span")
  span.innerHTML = `The age of the student is  ${res}`
  document.body.append(span)
}

Fetch and Task

Fetch is an Alternative to XHR
Syntax: fetch("api url")
fetch always returns a promise
Inside The promise Object we have the data in terms of readable stream
Reaadable Stream: it's a packet of data...
Converting readable stream to json Object... we use the .json() method

This .json() method will again give promise..
to handle that promise we need one more .then()

//Open Weather map
var res = fetch("https://restcountries.com/v3.1/all")
.then((data)=>data.json()).then((data1)=>bar(data1))
// console.log(res);
function bar(data1){
console.log(data1);
for(var i =0;i<data1.length;i++){
    var res = data1[i].latlng
    foo(...res)
}
}
//here we are using open weather map
function foo(lat,lon){
var final_res = fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=`)
.then((data2)=>data2.json()).then((data3)=>console.log(data3.main.temp))
}

//Task sample

var res = fetch("https://restcountries.com/v3.1/all")
.then((data)=>data.json()).then((data1)=>bar(data1))

var container = document.createElement("div");
container.className = "container"

var row = document.createElement("div");
row.className = "row"



function bar(data1){
    for(var i =0;i<data1.length;i++){
   var col = document.createElement("div");
    col.className = "col-md-4"
    col.innerHTML = `<div class="card" style="width: 18rem;">
    <img src="..." class="card-img-top" alt="...">
    <div class="card-body">
      <h5 class="card-title">Card title</h5>
      <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
    </div>
  </div>`
  row.append(col)
  container.append(row)
  document.body.append(container)  
}
}
